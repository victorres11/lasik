"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./beautylog.plugins");
var log = require("./beautylog.log");
var Ora = (function () {
    function Ora(textArg, colorArg, startArg) {
        if (startArg === void 0) { startArg = false; }
        this._oraObject = plugins.ora({
            spinner: "dots",
            text: textArg,
            color: colorArg
        });
        startArg ? this._oraObject.start() : void (0);
    }
    Ora.prototype.text = function (textArg) {
        this._oraObject.text = textArg;
    };
    ;
    Ora.prototype.start = function (textArg, colorArg) {
        if (textArg)
            this._oraObject.text = textArg;
        if (colorArg)
            this._oraObject.color = colorArg;
        this._oraObject.start();
    };
    ;
    Ora.prototype.end = function () {
        this._oraObject.stop();
        this._oraObject.clear();
    };
    Ora.prototype.endOk = function (textArg) {
        this.end();
        log.ok(textArg);
    };
    ;
    Ora.prototype.endError = function (textArg) {
        this.end();
        log.error(textArg);
    };
    ;
    Ora.prototype.stop = function () {
        this.end();
    };
    // log methods that play nice with ora
    Ora.prototype.log = function (logText, logType) {
        this.stop();
        log.log(logText, logType);
        this.start();
    };
    return Ora;
}());
exports.Ora = Ora;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlYXV0eWxvZy5jbGFzc2VzLm9yYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQTRDO0FBQzVDLElBQVksT0FBTyxXQUFNLHFCQUFxQixDQUFDLENBQUE7QUFDL0MsSUFBWSxHQUFHLFdBQU0saUJBQWlCLENBQUMsQ0FBQTtBQUV2QztJQUdJLGFBQVksT0FBYyxFQUFDLFFBQWUsRUFBQyxRQUF3QjtRQUF4Qix3QkFBd0IsR0FBeEIsZ0JBQXdCO1FBQy9ELElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUMxQixPQUFPLEVBQUMsTUFBTTtZQUNkLElBQUksRUFBQyxPQUFPO1lBQ1osS0FBSyxFQUFDLFFBQVE7U0FDakIsQ0FBQyxDQUFDO1FBRUgsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxrQkFBSSxHQUFKLFVBQUssT0FBTztRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztJQUNuQyxDQUFDOztJQUVELG1CQUFLLEdBQUwsVUFBTSxPQUFlLEVBQUMsUUFBZ0I7UUFDbEMsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDO1lBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQzNDLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQztZQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7O0lBQ0QsaUJBQUcsR0FBSDtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBQ0QsbUJBQUssR0FBTCxVQUFNLE9BQU87UUFDVCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BCLENBQUM7O0lBQ0Qsc0JBQVEsR0FBUixVQUFTLE9BQU87UUFDWixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7O0lBQ0Qsa0JBQUksR0FBSjtRQUNJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsaUJBQUcsR0FBSCxVQUFJLE9BQWMsRUFBQyxPQUFjO1FBQzdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBQ0wsVUFBQztBQUFELENBM0NBLEFBMkNDLElBQUE7QUEzQ1ksV0FBRyxNQTJDZixDQUFBIiwiZmlsZSI6ImJlYXV0eWxvZy5jbGFzc2VzLm9yYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cbmltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vYmVhdXR5bG9nLnBsdWdpbnNcIjtcbmltcG9ydCAqIGFzIGxvZyBmcm9tIFwiLi9iZWF1dHlsb2cubG9nXCI7XG5cbmV4cG9ydCBjbGFzcyBPcmEge1xuICAgIHByaXZhdGUgX29yYU9iamVjdDtcbiAgICBzdGF0ZTpzdHJpbmc7XG4gICAgY29uc3RydWN0b3IodGV4dEFyZzpzdHJpbmcsY29sb3JBcmc6c3RyaW5nLHN0YXJ0QXJnOmJvb2xlYW4gPSBmYWxzZSl7XG4gICAgICAgIHRoaXMuX29yYU9iamVjdCA9IHBsdWdpbnMub3JhKHtcbiAgICAgICAgICAgIHNwaW5uZXI6XCJkb3RzXCIsXG4gICAgICAgICAgICB0ZXh0OnRleHRBcmcsXG4gICAgICAgICAgICBjb2xvcjpjb2xvckFyZ1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHN0YXJ0QXJnID8gdGhpcy5fb3JhT2JqZWN0LnN0YXJ0KCkgOiB2b2lkKDApO1xuICAgIH1cbiAgICB0ZXh0KHRleHRBcmcpe1xuICAgICAgICB0aGlzLl9vcmFPYmplY3QudGV4dCA9IHRleHRBcmc7XG4gICAgfTtcbiAgICBcbiAgICBzdGFydCh0ZXh0QXJnPzpzdHJpbmcsY29sb3JBcmc/OnN0cmluZyl7XG4gICAgICAgIGlmKHRleHRBcmcpIHRoaXMuX29yYU9iamVjdC50ZXh0ID0gdGV4dEFyZztcbiAgICAgICAgaWYoY29sb3JBcmcpIHRoaXMuX29yYU9iamVjdC5jb2xvciA9IGNvbG9yQXJnO1xuICAgICAgICB0aGlzLl9vcmFPYmplY3Quc3RhcnQoKTtcbiAgICB9O1xuICAgIGVuZCgpe1xuICAgICAgICB0aGlzLl9vcmFPYmplY3Quc3RvcCgpO1xuICAgICAgICB0aGlzLl9vcmFPYmplY3QuY2xlYXIoKTtcbiAgICB9XG4gICAgZW5kT2sodGV4dEFyZyl7XG4gICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgIGxvZy5vayh0ZXh0QXJnKTtcbiAgICB9O1xuICAgIGVuZEVycm9yKHRleHRBcmcpe1xuICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICBsb2cuZXJyb3IodGV4dEFyZyk7XG4gICAgfTtcbiAgICBzdG9wKCl7IC8vIGFsaWFzIGZvciBlbmRcbiAgICAgICAgdGhpcy5lbmQoKTtcbiAgICB9XG4gICAgXG4gICAgLy8gbG9nIG1ldGhvZHMgdGhhdCBwbGF5IG5pY2Ugd2l0aCBvcmFcbiAgICBsb2cobG9nVGV4dDpzdHJpbmcsbG9nVHlwZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgbG9nLmxvZyhsb2dUZXh0LGxvZ1R5cGUpO1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxufSJdfQ==
